from tkinter import *

def finish():
    root.destroy()  # Перехват закрытия окна. ручное закрытие окна и всего приложения

root = Tk()  # создаем корневой объект - окно

root.title("Приложение на Tkinter")  # По умолчанию заголовок окна - "tk". Для установки заголовка применяется метод title(), в который передается текст заголовка. Устанавливаем заголовок окна

root.geometry("300x250+400+200")  # По умолчанию окно имеет некоторые стандартные размеры. Для установки размеров используется метод geometry(). Устанавливаем размеры окна
# Теперь строка в методе geometry имеет следующий формат: "Ширина x Высота + координатаX + координатаY". То есть при запуске окно шириной в 300 единиц и высотой 250 единиц будет находиться на 400 пикселей вправо и на 200 пикселей вниз от верхнего левого угла экрана.

root.attributes("-fullscreen", True)  # С помощью специального метода attributes() можно установать отдельные атрибуты окна, для которых нет специальных методов. В качестве первого параметра метод принимает название атрибута, которое предваряется дефисом.
# А второй параметр - значение для этого атрибута. Здесь атрибуту fullscreen передается значение True, благодаря чему устанавливается полноэкранный режим

root.attributes("-alpha", 0.5)  # Другой пример - установка прозрачности с помощью атрибута alpha

root.attributes("-toolwindow", True)  # Третий пример - отключение верхней панели окна (за исключением заголовка и крестика для закрытия)



root.iconbitmap(default="favicon.ico")  # Перед заголовком отображается иконка. По умолчанию это иконка пера. С помощью метода iconbitmap() можно задать любую другую иконку. Например, определим в одной папке с файлом приложения какой-нибудь файл с иконкой, допустип, он называется "favicon.ico" и используем его для установки иконки
# через параметр default в метод iconbitmap передается путь к иконки. В данном случае файл иконки располагается с файлом приложения в одной папке, поэтому в качестве пути указывается просто имя файла.

icon = PhotoImage(file = "icon2.png")
root.iconphoto(False, icon)  # В качестве альтернативы для установки иконки также можно было бы использовать метод iconphoto()
# Первый параметр метода iconphoto() указывает, надо ли использовать иконку по умолчанию для всех окон приложения. Второй параметр - объект PhotoImage, который собственно и устанавливает файл изображения (здесь файл "icon2.png)

# Однако что, если мы хотим, чтобы окно вообще не имело иконки? В этом случае можно определить прозрачную иконку и также ее подключать. Можно это сделать также динамически без наличия реального файла:
from tkinter import *
import tempfile, base64, zlib

ICON = zlib.decompress(base64.b64decode("eJxjYGAEQgEBBiDJwZDBysAgxsDAoAHEQCEGBQaIOAg4sDIgACMUj4JRMApGwQgF/ykEAFXxQRc="))

_, ICON_PATH = tempfile.mkstemp()
with open(ICON_PATH, "wb") as icon_file:
    icon_file.write(ICON)  # В данном случае создается временный файл иконки в памяти.

root = Tk()
root.title("Hello METANIT.COM")
root.protocol("WM_DELETE_WINDOW", finish)  # Первый параметр метода protocol() представляет имя события, в данном случае это "WM_DELETE_WINDO". Второй параметр представляет функцию, которая вызывается при возникновении события. Здесь эта функция finish(), в котором с помощью метода destroy() вручную вызываем закрытие окна (а с ним и всего приложения)
root.geometry("300x250")

root.iconbitmap(default=ICON_PATH)

root.mainloop()


root.resizable(False, False)  # По умолчанию мы можем изменять размеры окна. Тем не менее иногда может потребоваться сделать размер окна фиксированным. В этом случае мы можем использовать метод resizable().
# Его первый параметр указывает, может ли пользователь растягивать окно по ширине, а второй параметр - можно ли растягивать по высоте. Чтобы запретить растягивание по какой-либо стороне, необходимо для соответствующего параметра передать значение False.

# Также можно установить минимальные и максимальные размеры окна:
root.minsize(200,150)   # минимальные размеры: ширина - 200, высота - 150
root.maxsize(400,300)   # максимальные размеры: ширина - 400, высота - 300

label = Label(text="Hello METANIT.COM")  # создаем текстовую метку
label.pack()  # размещаем метку в окне

root.mainloop()  # Для отображения окна и взаимодействия с пользователем у окна вызывается метод mainloop()